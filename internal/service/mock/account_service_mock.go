// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/account_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/account_service.go -destination=internal/service/mock/account_service_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "account-service/internal/model"
	persistence "account-service/internal/persistence"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountService) Create(userId int, account model.Account) (model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, account)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountServiceMockRecorder) Create(userId, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountService)(nil).Create), userId, account)
}

// Delete mocks base method.
func (m *MockAccountService) Delete(userId, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountServiceMockRecorder) Delete(userId, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountService)(nil).Delete), userId, id)
}

// GetAll mocks base method.
func (m *MockAccountService) GetAll(userId, page, size int) (persistence.Page[model.Account], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId, page, size)
	ret0, _ := ret[0].(persistence.Page[model.Account])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAccountServiceMockRecorder) GetAll(userId, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAccountService)(nil).GetAll), userId, page, size)
}

// GetById mocks base method.
func (m *MockAccountService) GetById(userId, id int) (model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, id)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockAccountServiceMockRecorder) GetById(userId, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockAccountService)(nil).GetById), userId, id)
}

// Update mocks base method.
func (m *MockAccountService) Update(userId, id int, account model.Account) (model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, id, account)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccountServiceMockRecorder) Update(userId, id, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountService)(nil).Update), userId, id, account)
}
